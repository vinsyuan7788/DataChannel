<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>application.data.channel</groupId>
    <artifactId>spring-boot</artifactId>
    <version>0.0.1-SNAPSHOT</version>
  </parent>
  <artifactId>spring-boot-1.3.x</artifactId>
  <name>spring-boot-1.3.x</name>
  <url>http://maven.apache.org</url>
	
  <dependencies>
  	<!-- Here are the dependencies built from local Maven projects or modules-->
  	<!--
  		Spring-boot-parent: for providing underlying abstraction and utility for top-level project 
  	-->
   	<dependency>
  		<groupId>application.data.channel</groupId>
  		<artifactId>spring-boot-1.3.x-parent</artifactId>
  		<version>0.0.1-SNAPSHOT</version>
  	</dependency>
  	<!-- 
  		Authorization middle-ware: for providing authorization utility
  		== Currently introducing this dependency to make Shiro works for authorization will cause a problem
  		   == This problem is that DAO in this dependency (i.e., middleware-authorization) cannot find the method defined in BaseDAO which is defined in spring-boot-parent
  	--> 
  	<dependency>
  		<groupId>application.data.channel</groupId>
  		<artifactId>bottomware-authorization</artifactId>
  		<version>0.0.1-SNAPSHOT</version>
  	</dependency>
	
	<!-- Here are the dependencies regarding Redis -->
	<!-- 
		Spring component that facilitates Redis
	-->
	<dependency>
		<groupId>org.springframework.data</groupId>
		<artifactId>spring-data-redis</artifactId>
		<version>1.6.4.RELEASE</version>
	</dependency>
	<!-- 
		Jedis: for providing blazingly small and sane Redis java client
	-->
	<dependency>
		<groupId>redis.clients</groupId>
		<artifactId>jedis</artifactId>
		<version>2.7.3</version>
	</dependency>
	<!--
		Spring JDBC component
	-->
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-jdbc</artifactId>
		<version>4.2.6.RELEASE</version>
	</dependency>
	
 	<!-- Here are the dependencies for middle-ware testing -->
	<!--
		Spring-transaction component
	-->
	<dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-tx</artifactId>
	    <version>4.2.6.RELEASE</version>
	</dependency>
	
	<!-- Here are the dependencies regarding utility -->
    <!--
    	Apache Common BeanUtils library: for providing an easy-to-use but flexible wrapper around reflection and introspection
    -->
	<dependency>
	    <groupId>commons-beanutils</groupId>
	    <artifactId>commons-beanutils</artifactId>
	    <version>1.9.3</version>
	</dependency>
	
	<!-- Here are the dependencies that need to be further studied -->
	<!-- 
		Spring-boot components that integrates MyBatis
	--> 	
<!--
	<dependency>
	    <groupId>org.mybatis.spring.boot</groupId>
	    <artifactId>mybatis-spring-boot-starter</artifactId>
	    <version>1.3.0</version>
	</dependency>
	<dependency>
	    <groupId>org.mybatis.spring.boot</groupId>
	    <artifactId>mybatis-spring-boot-autoconfigure</artifactId>
	    <version>1.3.0</version>
	</dependency>
-->
  </dependencies>
  	
	<!-- Directory specification, plug-ins and packages for Maven build -->
	<build>
		<!-- Here specifies main and test directory of source and resources -->
	    <sourceDirectory>src/main/java</sourceDirectory>
	    <resources>
	    	<resource>
	    		<directory>src/main/resources</directory>
	   		</resource>
		</resources>
	    <testSourceDirectory>src/test/java</testSourceDirectory>
	    <testResources>
	    	<testResource>
	    		<directory>src/test/resources</directory>
	   		</testResource>
		</testResources>
		
		<!-- Here specifies the plugins that can be used by the children POM files (including this file) of this file -->
		<pluginManagement>
			<plugins>
				<!--
					This plugin is used to compile the sources of current project
					== Confirmed usable version: 2.0.2, 3.6.1
				-->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.6.1</version>
				</plugin>
				<!--  
					This plugin is used to package necessary dependencies and specify main class
					== Confirmed usable version: 2.4.1
				-->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>  
		            <artifactId>maven-shade-plugin</artifactId>  
		            <version>2.4.1</version>
				</plugin>
				<!-- 
					This plugin is used to pakcage a executable jar for Spring-boot
					== Confirmed usable version: 1.3.5
				 -->
				<plugin>
					 <groupId>org.springframework.boot</groupId>
					 <artifactId>spring-boot-maven-plugin</artifactId>
					 <version>1.3.5.RELEASE</version>
				</plugin>
				<!--
					This plugin is used to process the resources in the project
					== Confirmed usable version: 2.6
				-->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<version>2.6</version>
				</plugin>
				<!-- 
					This plugin is used to merge maven resource
					== Confirmed usable version: 1.0.0
				-->
				<plugin>
					<groupId>application.plugin.maven</groupId>
					<artifactId>resource-maven-plugin</artifactId>
					<version>1.0.0</version>
				</plugin>
			</plugins>
		</pluginManagement>
		
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<mainClass>application.io.spring.SpringBootApplication</mainClass>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<encoding>UTF-8</encoding>
					<showWarnings>true</showWarnings>
				</configuration>
				<!-- <executions>
					<execution>
						<phase>compile</phase>
						<goals>
							<goal>compile</goal>
						</goals>
					</execution>
				</executions> -->
			</plugin>
			<!-- <plugin>  
	            <groupId>org.apache.maven.plugins</groupId>  
	            <artifactId>maven-shade-plugin</artifactId>  
	            <executions>  
	                <execution>  
	                    <phase>package</phase>  
	                    <goals>  
	                        <goal>shade</goal>  
	                    </goals>  
	                    <configuration>  
	                        <transformers>
	                        	Here specifies the main class for this Maven project after packaging
	                            <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">  
	                                <mainClass>application.io.spring.SpringBootApplication</mainClass>
	                            </transformer>  
	                        </transformers>  
	                    </configuration>  
	                </execution>  
	            </executions>  
	        </plugin> -->
			<plugin>
				<groupId>application.plugin.maven</groupId>
				<artifactId>resource-maven-plugin</artifactId>
				<configuration>
					<outputDirectory>target/classes</outputDirectory>
					<mergeDirectorys>
						<mergeDirectory>config</mergeDirectory>
						<mergeDirectory>error</mergeDirectory>
						<mergeDirectory>mybatis</mergeDirectory>
						<mergeDirectory>dict</mergeDirectory>
					</mergeDirectorys>
					<workDirectory>target/work</workDirectory>
					<mergeFileBeans>
						<mergeFileBean>
							<mergeFilePattern>.*/dict/dict-.*.properties</mergeFilePattern>
							<targetMergeName>target/classes/dict/model-dict.properties</targetMergeName>
						</mergeFileBean>
					</mergeFileBeans>
				</configuration>
				<executions>
					<execution>
						<id>merge</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>merge</goal>
						</goals>
					</execution>
					<execution>
						<id>gitlog</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>gitlog</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- 			
			<plugin>
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-bundle-plugin</artifactId>
				<extensions>true</extensions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<failOnMissingWebXml>false</failOnMissingWebXml>
				</configuration>
			</plugin>
			-->
		</plugins>
	</build>
</project>
