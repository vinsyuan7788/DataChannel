package application.io.spring.bottomware.authorization.business.provider.service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import net.sf.json.JSONObject;
import org.springframework.stereotype.Service;

import application.io.spring.bottomware.authorization.business.api.model.AuthorizationUser;
import application.io.spring.bottomware.authorization.business.api.service.AuthorizationUserService;
import application.io.spring.bottomware.authorization.business.api.vo.AuthorizationUserResourceVo;
import application.io.spring.bottomware.authorization.business.api.vo.AuthorizationUserRoleVo;
import application.io.spring.bottomware.authorization.business.provider.dao.AuthorizationUserDAO;
import application.io.spring.bottomware.utility.BeanUtils;
import application.io.spring.common.utils.json.GsonUtils;
import application.io.spring.core.base.api.vo.PageVo;
import application.io.spring.core.base.provider.service.BaseServiceImpl;
import lombok.extern.log4j.Log4j2;

/**
 *	This is a service implementation class auto-generated by underlying framework. <br/>
 *	<p>
 *  This class can be modified according to business requirement.
 *  </p>
 *	
 *  @Description 该服务接口实现类的内容可根据实际业务需求调整
 *	@author vinsy
 *  @date 2018/03/23
 */
@Log4j2
@Service("authorizationUserService")
public class AuthorizationUserServiceImpl extends BaseServiceImpl<AuthorizationUser> implements AuthorizationUserService {

	@Resource
    private AuthorizationUserDAO authorizationUserDAO;

	// 根据jsonb条件查询分页数据
	@SuppressWarnings("unchecked")
	@Override
	public PageVo<AuthorizationUser> getJsonbPageableList(AuthorizationUser authorizationUser,Long offset, Long limit, String orderby){
		Map<String,Object> params = new HashMap<String,Object>();
		if (authorizationUser != null) {
    		params = GsonUtils.GSON.fromJson(GsonUtils.GSON.toJson(authorizationUser), Map.class); 
    	}

		// 将json字符串转为map并将其作为查询条件
		JSONObject  jasonObject0 = JSONObject.fromObject(authorizationUser.getExtendedField());
		Map<String,Object> map0 = (Map<String,Object>)jasonObject0;
		for (Map.Entry<String,Object> entry0 : map0.entrySet()) {
		    params.put(entry0.getKey(), entry0.getValue());
		}
		params = this.getCondition(params, offset, limit, orderby);
    	PageVo<AuthorizationUser> pageVo = this.getPageVo(params);
    	pageVo.setRows(authorizationUserDAO.getJsonbPageableList(params));
    	pageVo.setTotal(authorizationUserDAO.getJsonbListCount(params));
    	return pageVo;
	}

	@Override
	public List<AuthorizationUserRoleVo> selectAllUserRolesByName(AuthorizationUser query) {
		try {
			return authorizationUserDAO.selectAllUserRolesByName(BeanUtils.beanToMap(query));
		} catch (Exception e) {
			log.error("=== AuthorizationUserServiceImpl | selectAllUserRolesByName throws an exception"
					+ " | exception message: " + e.getMessage() + " ===");
			return null;
		}
	}

	@Override
	public List<AuthorizationUserRoleVo> selectAllUserRolesByNameV2(AuthorizationUser query) {
		try {
			return authorizationUserDAO.selectAllUserRolesByNameV2(BeanUtils.beanToMap(query));
		} catch (Exception e) {
			log.error("=== AuthorizationUserServiceImpl | selectAllUserRolesByNameV2 throws an exception"
					+ " | exception message: " + e.getMessage() + " ===");
			return null;
		}
	}
	
	@Override
	public List<AuthorizationUserResourceVo> selectAllUserResourcesByName(AuthorizationUser query) {
		try {
			return authorizationUserDAO.selectAllUserResourcesByName(BeanUtils.beanToMap(query));
		} catch (Exception e) {
			log.error("=== AuthorizationUserServiceImpl | selectAllUserResourcesByName throws an exception"
					+ " | exception message: " + e.getMessage() + " ===");
			return null;
		}
	}
	
	@Override
	public List<AuthorizationUserResourceVo> selectAllUserResourcesByNameV2(AuthorizationUser query) {
		try {
			return authorizationUserDAO.selectAllUserResourcesByNameV2(BeanUtils.beanToMap(query));
		} catch (Exception e) {
			log.error("=== AuthorizationUserServiceImpl | selectAllUserResourcesByNameV2 throws an exception"
					+ " | exception message: " + e.getMessage() + " ===");
			return null;
		}
	}
}
